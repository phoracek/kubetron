# TODO: add documentation for all objects
# TODO: list configurable parameters
apiVersion: v1
kind: List
items:

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: kubetron
    namespace: kubetron

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: kubetron:system:api-server-auth
  rules:
    - apiGroups:
        - "kubetron.network.kubevirt.io"
      resources:
        - admission
      verbs:
        - create

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: kubetron:system:api-server-auth
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kubetron:system:api-server-auth
  # TODO: this does not look right, check if we can change it
  subjects:
  - kind: Group
    name: system:authenticated
    apiGroup: rbac.authorization.k8s.io
  - kind: Group
    name: system:unauthenticated
    apiGroup: rbac.authorization.k8s.io

# TODO: limit to needed, now everything is allowed
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: kubetron:system:admission-reader
  rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
    nonResourceURLs: []

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: kubetron:system:admission-reader
  roleRef:
    apiGroup: ""
    kind: ClusterRole
    name: kubetron:system:admission-reader
  subjects:
  - kind: ServiceAccount
    name: kubetron
    namespace: kubetron

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: kubetron:system:reader
  rules:
    - apiGroups:
        - ""
      resources:
        - pods
        - namespaces
      verbs:
        - get
        - list

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: kubetron:system:reader
  roleRef:
    apiGroup: ""
    kind: ClusterRole
    name: kubetron:system:reader
  subjects:
  - kind: ServiceAccount
    name: kubetron
    namespace: kubetron

# TODO: check if we need this
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: kubetron:system:extension-apiserver-authentication-reader
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - kind: ServiceAccount
    name: kubetron
    namespace: kubetron

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: kubetron:system:auth-delegator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: kubetron
    namespace: kubetron

- apiVersion: v1
  kind: Namespace
  metadata:
    name: kubetron
    labels:
      kubetron.network.kubevirt.io/ignoreAdmission: "true"

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: admission-audit-config
    namespace: kubetron
  data:
    audit.yaml: |
      apiVersion: audit.k8s.io/v1beta1
      kind: Policy
      rules:
      - level: Metadata

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: config
    namespace: kubetron
  data:
    providerURL: $PROVIDER_URL
    resourceNamespace: kubetron.network.kubevirt.io
    reservedMainResourceName: main
    reservedOverlayResourceName: overlay

- apiVersion: v1
  kind: Secret
  metadata:
    name: admission-certs
    namespace: kubetron
  type: Opaque
  data:
    cert.pem: $ADMISSION_CERT
    key.pem: $ADMISSION_KEY

- apiVersion: v1
  kind: Service
  metadata:
    name: pod-admission
    namespace: kubetron
    labels:
      app: pod-admission
  spec:
    ports:
    - name: https-webhook
      port: 443
    selector:
      app: pod-admission

- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: pod-admission
    namespace: kubetron
    labels:
      app: pod-admission
  spec:
    selector:
      matchLabels:
        app: pod-admission
    updateStrategy:
      type: RollingUpdate
    template:
      metadata:
        name: pod-admission
        labels:
          app: pod-admission
      spec:
        serviceAccountName: kubetron
        containers:
        - name: pod-admission
          image: $POD_ADMISSION_IMAGE
          imagePullPolicy: Always
          args:
          - --tls-cert-file=/etc/certs/cert.pem
          - --tls-private-key-file=/etc/certs/key.pem
          - --provider-url=$(PROVIDER_URL)
          - --resource-namespace=$(RESOURCE_NAMESPACE)
          - --reserved-main-resource-name=$(RESERVED_MAIN_RESOURCE_NAME)
          - --reserved-overlay-resource-name=$(RESERVED_OVERLAY_RESOURCE_NAME)
          - --audit-log-path=-
          - --audit-policy-file=/etc/config/audit.yaml
          - --v=6
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          env:
          - name: PROVIDER_URL
            valueFrom:
              configMapKeyRef:
                name: config
                key: providerURL
          - name: RESOURCE_NAMESPACE
            valueFrom:
              configMapKeyRef:
                name: config
                key: resourceNamespace
          - name: RESERVED_MAIN_RESOURCE_NAME
            valueFrom:
              configMapKeyRef:
                name: config
                key: reservedMainResourceName
          - name: RESERVED_OVERLAY_RESOURCE_NAME
            valueFrom:
              configMapKeyRef:
                name: config
                key: reservedOverlayResourceName
          volumeMounts:
          - name: certs
            mountPath: /etc/certs
            readOnly: true
          - name: audit-config
            mountPath: /etc/config
            readOnly: true
        volumes:
        - name: certs
          secret:
            secretName: admission-certs
        - name: audit-config
          configMap:
            name: admission-audit-config
        tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        nodeSelector:
          "kubernetes.io/hostname": "k8s-01"

- apiVersion: admissionregistration.k8s.io/v1beta1
  kind: MutatingWebhookConfiguration
  metadata:
    name: kubetron-pod
  webhooks:
  - name: kubetron.network.kubevirt.io
    clientConfig:
      service:
        name: pod-admission
        namespace: kubetron
        path: /apis/kubetron.network.kubevirt.io/v1alpha1/pod-admission
      caBundle: $KUBERNETES_CA
    rules:
      - operations: ["CREATE", "DELETE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources:
        - pods
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
      - key: kubetron.network.kubevirt.io/ignoreAdmission
        operator: DoesNotExist

- apiVersion: v1
  kind: Service
  metadata:
    name: network-admission
    namespace: kubetron
    labels:
      app: network-admission
  spec:
    ports:
    - name: https-webhook
      port: 443
    selector:
      app: network-admission

- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: network-admission
    namespace: kubetron
    labels:
      app: network-admission
  spec:
    selector:
      matchLabels:
        app: network-admission
    updateStrategy:
      type: RollingUpdate
    template:
      metadata:
        name: network-admission
        labels:
          app: network-admission
      spec:
        serviceAccountName: kubetron
        containers:
        - name: network-admission
          image: $NETWORK_ADMISSION_IMAGE
          imagePullPolicy: Always
          args:
          - --tls-cert-file=/etc/certs/cert.pem
          - --tls-private-key-file=/etc/certs/key.pem
          - --audit-log-path=-
          - --audit-policy-file=/etc/config/audit.yaml
          - --v=6
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          volumeMounts:
          - name: certs
            mountPath: /etc/certs
            readOnly: true
          - name: audit-config
            mountPath: /etc/config
            readOnly: true
        volumes:
        - name: certs
          secret:
            secretName: admission-certs
        - name: audit-config
          configMap:
            name: admission-audit-config
        tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        nodeSelector:
          "kubernetes.io/hostname": "k8s-01"

- apiVersion: admissionregistration.k8s.io/v1beta1
  kind: MutatingWebhookConfiguration
  metadata:
    name: kubetron-network
  webhooks:
  - name: kubetron.network.kubevirt.io
    clientConfig:
      service:
        name: network-admission
        namespace: kubetron
        path: /apis/kubetron.network.kubevirt.io/v1alpha1/network-admission
      caBundle: $KUBERNETES_CA
    rules:
      - operations: ["CREATE", "DELETE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources:
        - networks
    failurePolicy: Fail

- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: deviceplugin
    namespace: kubetron
  spec:
    selector:
      matchLabels:
        name: deviceplugin
    template:
      metadata:
        labels:
          name: deviceplugin
      spec:
        serviceAccountName: kubetron
        hostNetwork: true
        hostPID: true
        containers:
        - name: deviceplugin
          image: $DEVICEPLUGIN_IMAGE
          imagePullPolicy: Always
          args:
            - -resource-namespace=$(RESOURCE_NAMESPACE)
            - -reserved-main-resource-name=$(RESERVED_MAIN_RESOURCE_NAME)
            - -reserved-overlay-resource-name=$(RESERVED_OVERLAY_RESOURCE_NAME)
            - -v=6
            - -logtostderr
          securityContext:
            privileged: true
          env:
          - name: RESOURCE_NAMESPACE
            valueFrom:
              configMapKeyRef:
                name: config
                key: resourceNamespace
          - name: RESERVED_MAIN_RESOURCE_NAME
            valueFrom:
              configMapKeyRef:
                name: config
                key: reservedMainResourceName
          - name: RESERVED_OVERLAY_RESOURCE_NAME
            valueFrom:
              configMapKeyRef:
                name: config
                key: reservedOverlayResourceName
          volumeMounts:
            - name: proc
              mountPath: /host/proc
            - name: var-run
              mountPath: /var/run
            - name: device-plugin
              mountPath: /var/lib/kubelet/device-plugins
        volumes:
          - name: var-run
            hostPath:
              path: /var/run
          - name: proc
            hostPath:
              path: /proc
          - name: device-plugin
            hostPath:
              path: /var/lib/kubelet/device-plugins
